package tn.esprit.tests.CategoryTest;

import tn.esprit.entities.Category;
import tn.esprit.services.CategoryService;
import java.time.LocalDateTime;
import java.util.Optional;

public class CategoryServiceTest {
    private static final CategoryService categoryService = CategoryService.getInstance();

    public static void main(String[] args) {
        try {
            System.out.println("=== D√©but des tests CategoryService ===");

            // Test 1: Cr√©ation de cat√©gorie
          //  Category testCategory = createCategoryTest();

            // Test 2: Modification de cat√©gorie
        //    modifyCategoryTest(testCategory);

            // Test 3: Suppression de cat√©gorie
          //  deleteCategoryTest(testCategory);

            // Test 4: V√©rification finale
            listAllCategoriesTest();

            System.out.println("=== Tous les tests ont √©t√© ex√©cut√©s avec succ√®s ===");
        } catch (Exception e) {
            System.err.println("‚ùå Erreur critique pendant les tests: " + e.getMessage());
            e.printStackTrace();
        }
    }

  /*  private static Category createCategoryTest() {
        System.out.println("\n--- Test 1: Cr√©ation de cat√©gorie ---");
        Category category = new Category(
                "Test Category " + System.currentTimeMillis(),
                "Description de test",
                LocalDateTime.now(),
                true,
                "fa-test-icon"
        );

        categoryService.ajouter(category);
        System.out.println("‚úÖ Cat√©gorie cr√©√©e: " + category.getName() + " (ID: " + category.getId() + ")");

        // V√©rification
        Category retrieved = categoryService.getOne(category);
        if (retrieved == null || !retrieved.getName().equals(category.getName())) {
            throw new AssertionError("La cat√©gorie n'a pas √©t√© correctement persist√©e");
        }

        return category;
    }*/

    private static void modifyCategoryTest(Category category) {
        System.out.println("\n--- Test 2: Modification de cat√©gorie ---");
        String newName = "Updated " + category.getName();
        String newIcon = "fa-updated-icon";

        category.setName(newName);
        category.setIcon(newIcon);
        category.setIsActive(false);

        categoryService.modifier(category);
        System.out.println("‚úÖ Cat√©gorie modifi√©e: " + category.getName());

        // V√©rification
        Category updated = categoryService.getOne(category);
        if (updated == null || !updated.getName().equals(newName)) {
            throw new AssertionError("La modification n'a pas √©t√© persist√©e");
        }
        System.out.println("V√©rification OK: Nom='" + updated.getName() +
                "', Icon='" + updated.getIcon() +
                "', Active=" + updated.getIsActive());
    }

   /* private static void deleteCategoryTest(Category category) {
        System.out.println("\n--- Test 3: Suppression de cat√©gorie ---");
        int idToDelete = category.getId();

        categoryService.supprimer(idToDelete);
        System.out.println("‚úÖ Cat√©gorie supprim√©e (ID: " + idToDelete + ")");

        // V√©rification
        Category deleted = categoryService.getOne(category);
        if (deleted != null) {
            throw new AssertionError("La cat√©gorie existe toujours apr√®s suppression");
        }
        System.out.println("V√©rification OK: La cat√©gorie a bien √©t√© supprim√©e");
    }*/

    private static void listAllCategoriesTest() {
        System.out.println("\n--- Test 4: Liste des cat√©gories ---");
        var categories = categoryService.getAll();

        if (categories.isEmpty()) {
            System.out.println("‚ÑπÔ∏è Aucune cat√©gorie trouv√©e");
            return;
        }

        System.out.println("üìã " + categories.size() + " cat√©gorie(s) trouv√©e(s):");
        categories.forEach(cat -> {
            System.out.println("\nID: " + cat.getId());
            System.out.println("Nom: " + cat.getName());
            System.out.println("Description: " + cat.getDescription());
            System.out.println("Active: " + cat.getIsActive());
            System.out.println("Icon: " + cat.getIcon());
            System.out.println("Cr√©√© le: " + cat.getCreatedAt());
        });
    }

    // M√©thode utilitaire pour trouver une cat√©gorie par ID
    private static Optional<Category> findCategoryById(int id) {
        return categoryService.getAll()
                .stream()
                .filter(c -> c.getId() == id)
                .findFirst();
    }
}